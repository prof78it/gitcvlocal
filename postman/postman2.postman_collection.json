{
	"info": {
		"_postman_id": "825e7535-4e5a-460f-a348-08fa0770e91a",
		"name": "postman2",
		"description": "another video",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pm2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"1.Correct response format JSON\", function() {\r",
							"pm.response.to.have.jsonBody()\r",
							"\r",
							"});\r",
							"\r",
							"//2. We have all declared fields in the response\r",
							"pm.test(\"2.Check that we have all declared fields\", function() {\r",
							"\r",
							"const jsonData =    pm.  response.  json();\r",
							"\r",
							"pm.expect(jsonData).to.have.property(\"people\");\r",
							"pm.expect(jsonData).to.have.property(\"planets\");\r",
							"pm.expect(jsonData).to.have.property(\"films\");\r",
							"pm.expect(jsonData).to.have.property(\"species\");\r",
							"pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"pm.expect(jsonData).to.have.property(\"starships\");\r",
							"\r",
							"});\r",
							"\r",
							"//3. Field value is not null\r",
							"\r",
							"pm.test(\"3.Check if value isn't null\", function() {\r",
							"var jsonData=pm.response.json();\r",
							"pm.expect(jsonData.people).not.equal(null);\r",
							"pm.expect(jsonData.planets).not.equal(null);\r",
							"pm.expect(jsonData.films).not.equal(null);\r",
							"pm.expect(jsonData.species).not.equal(null);\r",
							"pm.expect(jsonData.vehicles).not.equal(null);\r",
							"pm.expect(jsonData.starships).not.equal(null);\r",
							"}\r",
							");\r",
							"\r",
							"//4. Check value isn't empty\r",
							"pm.test(\"4.Check if value isn't empty\",function()\r",
							"{\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.people).not.equal(\"\");\r",
							"pm.expect(jsonData.planets).not.equal(\"\");\r",
							"pm.expect(jsonData.films).not.equal(\"\");\r",
							"pm.expect(jsonData.species).not.equal(\"\");\r",
							"pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"pm.expect(jsonData.starships).not.equal(\"\");\r",
							"\r",
							"}\r",
							");\r",
							"\r",
							"//5. Check if field corresponds to a specific value\r",
							"pm.test(\"5.Check if field corresponds to a specific value\", function(){\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
							"\r",
							"});\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"6.Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//7. Status message is OK\r",
							"pm.test(\"7.Status message is OK\",function(){\r",
							"pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"//8. Response time is less than 1000 ms\r",
							"\r",
							"pm.test(\"8.Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the responce\r",
							"pm.test(\"9.There is a specific header in the responce\",function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"});\r",
							"\r",
							"//10.The response has a specific header with a specific value\r",
							"\r",
							"pm.test(\"10.The response has a specific header with a specific value\",function(){\r",
							"pm.response.to.be.header(\"Content-Type\",\"application/json\")\r",
							"\r",
							"});\r",
							"\r",
							"//11.Cookie exists\r",
							"pm.test(\"11.Cookie exists\",function(){\r",
							"pm.cookies.has(\"\")\r",
							"});\r",
							"\r",
							"\r",
							"//12.Cookie has value\r",
							"pm.test(\"12.Cookie has value\",function(){\r",
							"try{\r",
							"var MY_COOKIE=pm.cookies.get(\"GeoIP\");\r",
							"console.log(MY_COOKIE);\r",
							"}\r",
							"catch(e) {\r",
							"console.log(\"Some problem with cookie-->\"+e)\r",
							"\r",
							"\r",
							"}\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/?csrftoken=yxMANbMMOYDjo3Uh3wYvsEZ4MyuK87Nv",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "csrftoken",
							"value": "yxMANbMMOYDjo3Uh3wYvsEZ4MyuK87Nv",
							"description": "yxMANbMMOYDjo3Uh3wYvsEZ4MyuK87Nv"
						}
					]
				}
			},
			"response": []
		}
	]
}